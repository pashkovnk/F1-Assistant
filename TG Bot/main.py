import telebot
from telebot import types

import config
from config import stickerpacks, liveURLs, contentURLs, payments_token
from database import BotDB
from info import getTeamInfo, getDriverInfo, getCalendar, tickets_to_BahrainGP
from aiogram.types.message import ContentType

bot = telebot.TeleBot(config.token)
button_teams = types.KeyboardButton("–ö–æ–º–∞–Ω–¥—ã üèé")
button_back = types.KeyboardButton("–ú–µ–Ω—é üßæ")
button_drivers = types.KeyboardButton("–ü–∏–ª–æ—Ç—ã üë®‚ÄçüöÄ")
button_calendar = types.KeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å üìÜ")
button_stickers = types.KeyboardButton("–°—Ç–∏–∫–µ—Ä—ã üòÅ")
button_live = types.KeyboardButton("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ üì∫")
button_content = types.KeyboardButton("–§–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã üé¨")
button_toBahrain = types.KeyboardButton("–ë–∏–ª–µ—Ç—ã –Ω–∞ –ì—Ä–∞–Ω-–ø—Ä–∏ –ë–∞—Ö—Ä–µ–π–Ω–∞ üáßüá≠")
button_finishOrder = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üèÅ")


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_menu = types.KeyboardButton("–ú–µ–Ω—é üßæ")
    markup.add(button_menu)
    bot.send_message(message.chat.id,
                     text="<b>–ü—Ä–∏–≤–µ—Ç, {0.first_name}!</b>\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π".format(
                         message.from_user), reply_markup=markup, parse_mode="HTML")
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEGph1jidiYrjUtZsw6JhY6XUMHMZT6awACEyIAAiO60ErugP0LGPd1mysE")


@bot.message_handler(commands=['hidebuttons', 'showbuttons'])
def buttons(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    if message.text == '/hidebuttons':
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id,
                         text="<b>–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω—ã!</b>\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=markup, parse_mode='HTML')
    elif message.text == '/showbuttons':
        markup.add(button_calendar, button_stickers, button_teams, button_drivers, button_live, button_content)
        bot.send_message(message.chat.id,
                         text="<b>–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!</b>\n\n–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏—Ö —Å —ç–∫—Ä–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=markup, parse_mode='HTML')


@bot.message_handler(content_types=['text'])
def func(message):
    bahrainInfo = tickets_to_BahrainGP()
    ticket_texts = {
        f"{bahrainInfo[0][ticket][0]} | {bahrainInfo[0][ticket][1]} | {bahrainInfo[0][ticket][2]}  {bahrainInfo[1][ticket]}":
            f"{bahrainInfo[0][ticket][0]}{bahrainInfo[0][ticket][1]}{bahrainInfo[0][ticket][2]}"
        for ticket in range(len(bahrainInfo[0]))}
    if (message.text in ["–ú–µ–Ω—é üßæ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", "–ú–µ–Ω—é"]):
        with open("current_order", 'w'):
            pass
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(button_calendar, button_stickers, button_teams, button_drivers, button_live, button_content,
                   button_toBahrain)
        bot.send_message(message.chat.id, text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

    elif ((message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å üìÜ") or (message.text in list(map(str, range(1950, 2100))))):
        if message.text != "–ö–∞–ª–µ–Ω–¥–∞—Ä—å üìÜ":
            bot.send_message(message.chat.id, f"–û–¥–Ω—É –º–∏–Ω—É—Ç–∫—É, —Å–µ–π—á–∞—Å –ø–æ–∏—â—É –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–∑–æ–Ω {message.text}")
            calendar = getCalendar(message.text)
            if calendar != f"<b>–Ø –Ω–µ –Ω–∞—à–µ–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å –§–æ—Ä–º—É–ª—ã-1 —Å–µ–∑–æ–Ω–∞ {message.text} üòû</b>\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —É –º–µ–Ω—è –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ —è —Å–º–æ–≥—É –µ–≥–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å":
                calendar = f"<b>–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏</b> üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n\n{getCalendar(message.text)}"
            bot.send_message(message.chat.id, calendar, parse_mode="HTML")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(button_calendar, button_stickers, button_teams, button_drivers, button_live, button_content,
                       button_toBahrain)
            bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ–¥ \n1950 ‚Äî {config.current_year}")

    elif (message.text == "–°—Ç–∏–∫–µ—Ä—ã üòÅ"):
        for sticker in stickerpacks:
            bot.send_sticker(message.chat.id, sticker)
        bot.send_message(message.chat.id,
                         text="<b>–í–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏!</b>  üèé\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫ —Å–µ–±–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É <b>\"–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã\"</b>",
                         parse_mode="HTML")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(button_calendar, button_stickers, button_teams, button_drivers, button_live, button_content,
                   button_toBahrain)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif (message.text == "–ö–æ–º–∞–Ω–¥—ã üèé"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        team_buttons = [types.KeyboardButton(f"{team}") for team in config.teamURLs.keys()]
        markup.add(*team_buttons)
        markup.add(button_back, row_width=2)
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    elif (message.text in config.teamURLs.keys()):
        teamInfo = getTeamInfo(config.teamURLs.get(message.text), config.teamPhotoURLs.get(message.text))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button_Driver1 = types.KeyboardButton(f"{teamInfo[3][0]}")
        button_Driver2 = types.KeyboardButton(f"{teamInfo[3][1]}")
        markup.add(button_Driver1, button_Driver2, button_teams, button_back)
        bot.send_photo(message.chat.id, photo=open(f"teamPics/{teamInfo[1]}.jpg", 'rb'),
                       caption=f"{teamInfo[2]}",
                       parse_mode='HTML')
        bot.send_message(message.chat.id, f"{teamInfo[0][0]}", parse_mode='HTML')
        for textID in range(1, teamInfo[4] + 1):
            bot.send_message(message.chat.id, teamInfo[0][textID], parse_mode='HTML')
        bot.send_message(message.chat.id, text=f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–∏–ª–æ—Ç–∞—Ö <b>{teamInfo[1]}</b>?",
                         reply_markup=markup, parse_mode='HTML')
    elif (message.text in config.driverPhotoURLs.keys()):
        driverInfo = getDriverInfo(config.driverURLs.get(message.text), config.driverPhotoURLs.get(message.text))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(button_teams, button_drivers, button_back)
        bot.send_photo(message.chat.id, photo=open(f'driverPics/{driverInfo[1]}.jpg', 'rb'), caption=driverInfo[2],
                       parse_mode='HTML')
        bot.send_message(message.chat.id, text=driverInfo[0], parse_mode='HTML', reply_markup=markup)
    elif (message.text == "–ü–∏–ª–æ—Ç—ã üë®‚ÄçüöÄ"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        driver_buttons = [types.KeyboardButton(f"{driver}") for driver in config.driverPhotoURLs.keys()]
        markup.add(*driver_buttons)
        markup.add(button_back, row_width=2)
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π –ø–∏–ª–æ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    elif (message.text == "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ üì∫"):
        markup = types.InlineKeyboardMarkup()
        live_buttons = [types.InlineKeyboardButton(text=f"{liveURL}", url=f"{liveURLs.get(liveURL)}") for liveURL in
                        liveURLs]
        markup.add(*live_buttons, row_width=1)
        bot.send_message(message.chat.id,
                         "<b>–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –§–æ—Ä–º—É–ª—É-1? üì∫</b>\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏, –≤–µ–¥—É—â–∏–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä—è–º—ã–º–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º–∏ –≥–æ–Ω–æ—á–Ω—ã—Ö —É–∏–∫-—ç–Ω–¥–æ–≤",
                         reply_markup=markup, parse_mode='HTML')
    elif (message.text == "–§–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã üé¨"):
        markup = types.InlineKeyboardMarkup()
        content_buttons = [types.InlineKeyboardButton(text=f"{content}", url=f"{contentURLs.get(content)}") for content
                           in contentURLs]
        markup.add(*content_buttons, row_width=1)
        bot.send_message(message.chat.id,
                         f"<b>–ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ –º–∏—Ä–µ –§–æ—Ä–º—É–ª—ã-1? üé¨</b>"
                         f"\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –ª—É—á—à–∏—Ö —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –æ –∑–Ω–∞–∫–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ –º–∏—Ä–∞ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞."
                         f"\n\n<b>–ö –±–æ–ª—å—à–æ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –≤–µ—Å—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤ –†–§ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, –Ω–æ, –∫–∞–∫ –º—ã –∑–Ω–∞–µ–º, –∫—Ç–æ –∏—â–µ—Ç, —Ç–æ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç.</b> üòâ",
                         reply_markup=markup, parse_mode='HTML')
    elif (message.text == "–ë–∏–ª–µ—Ç—ã –Ω–∞ –ì—Ä–∞–Ω-–ø—Ä–∏ –ë–∞—Ö—Ä–µ–π–Ω–∞ üáßüá≠"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        bahrainInfo = tickets_to_BahrainGP()
        ticket_texts = [
            f"{bahrainInfo[0][ticket][0]} | {bahrainInfo[0][ticket][1]} | {bahrainInfo[0][ticket][2]}  {bahrainInfo[1][ticket]}"
            for ticket in range(len(bahrainInfo[0]))]
        ticket_buttons = [types.KeyboardButton(text=f"{ticket_texts[ticket]}") for ticket in range(len(bahrainInfo[0]))
                          if ticket_texts[ticket - 1] != ticket_texts[ticket]]
        tickets = f"<b>–ë–∏–ª–µ—Ç—ã</b>\n–¢—Ä–∏–±—É–Ω–∞ | –¢–∏–ø –±–∏–ª–µ—Ç–∞ | –î–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è  –¶–µ–Ω–∞"
        markup.add(*ticket_buttons, row_width=2)
        bot.send_photo(message.chat.id, photo=open('GPPics/BahrainGP.JPG', 'rb'), caption=f"{tickets}",
                       reply_markup=markup, parse_mode='HTML')
    elif (message.text in ticket_texts.keys()):
        database = BotDB('F1Assistant.db')
        ticketInfo = database.get_ticketType_info(ticket_texts.get(message.text))
        with open("current_order", "w") as file:
            file.write(f"{message.text} ")
            if len(ticketInfo) != 0:
                markup = types.ReplyKeyboardMarkup(row_width=8, resize_keyboard=True)
                markup.add(button_toBahrain, button_finishOrder, button_back, row_width=1)
                bot.send_message(message.chat.id,
                                 text=f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–∏–±—É–Ω—É –∏–ª–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞\n–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ: {len(ticketInfo)}",
                                 reply_markup=markup, parse_mode="HTML")
            else:
                markup = types.ReplyKeyboardMarkup(row_width=8, resize_keyboard=True)
                markup.add(button_toBahrain, row_width=1)
                bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π —Ç—Ä–∏–±—É–Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏—Ö.")
    elif (message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üèÅ"):
        with open("current_order", 'r') as file:
            order = list(file.read().split('\n'))
            ("".join(order)).split('$')
            PRICES = [types.LabeledPrice(label=f"{(''.join(position)).split(' $')[0]}", amount=f"{int(''.join(((''.join(order)).split('$')[-1]).split(',')))}")
                      for position in order]
            bot.send_invoice(message.chat.id,
                             title="–í–∞—à –∑–∞–∫–∞–∑!",
                             provider_token=payments_token,
                             currency="usd",
                             is_flexible=False,
                             prices=PRICES,
                             description="–ë–∏–ª–µ—Ç –Ω–∞ –≥—Ä–∞–Ω-–ø—Ä–∏",
                             invoice_payload="test-invoice-payload")
    else:
        bot.send_message(message.chat.id, text="–ü—Ä–æ—Å—Ç–∏–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî")

@bot.pre_checkout_query_handler(lambda query: True)
def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@bot.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
def successful_payment(message: types.Message):
    key = open("current_order", 'r').read()
    key = ''.join(((''.join(list(key))).split(' $')[0]).split(' | '))[:-1]
    database = BotDB('F1Assistant.db')
    database.ticketIsBought(key)
    database.add_boughtTicket_toLogs(key, message.from_user.id)
    with open("current_order", 'w') as file:
        bot.send_message(message.chat.id, f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç.")


bot.polling(none_stop=True)
